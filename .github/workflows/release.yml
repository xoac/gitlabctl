name: Multi os release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        rust: [stable]
    steps:
    - uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/checkout@master
    # - name: Run tests
    # run: cargo test --verbose
    # - name: Build release
    #  run: cargo build --release
    - name: Create file
      run: |
        mkdir -p target/release/
        touch target/release/gitlabctl
    - name: Archive Release
      uses: thedoctor0/zip-release@master
      with:
        filename: 'gitlabctl_${{ runner.os }}_${{ github.ref }}.zip'
        path: 'target/release'
        exclusions: '*.d *.rlib build deps examples incremental'
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }} for ${{ runner.os }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: './gitlabctl_${{ runner.os }}_${{ github.ref }}.zip'
        asset_name: 'gitlabctl_${{ runner.os }}_${{ github.ref }}.zip'
        asset_content_type: application/zip
